package com.ilya.nordmap

import MapMarker_DATA
import android.content.Intent
import android.os.Bundle
import android.util.Log
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.tooling.preview.Preview
import androidx.lifecycle.asLiveData
import com.ilya.MeetingMap.Mine_menu.Map_Activity
import com.ilya.nordmap.ui.theme.NordMapTheme
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        val db = MainDb.getDb(applicationContext)



        enableEdgeToEdge()
        setContent {
            NordMapTheme {
                Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding ->
                    Greeting(
                        name = "Android",
                        modifier = Modifier.padding(innerPadding)
                    )
                   /* val intent = Intent(this@MainActivity, Map_Activity::class.java)
                    startActivity(intent)*/
                }
            }
            val markers =
                MapMarker_DATA(
                    name = "Эрмитаж",
                    type = "Музей",
                    lon = 30.3138,
                    lat = 59.9405,
                    description = "Один из крупнейших и старейших музеев мира.",
                    visitTime = "10:00 - 18:00",
                    isVisited = false,
                    imageUrl = "https://example.com/ermitage.jpg",
                    queryPrompt = "Что посмотреть в Эрмитаже?"
                )


            db.getDao().getAllItem().asLiveData().observe(this) { list ->
                if (list.isNullOrEmpty()) {
                    Log.e("Markers", "No markers found or error retrieving markers")
                } else {
                    list.forEach {
                        Log.d("Markers", "Marker: $it")
                    }
                }
            }

            CoroutineScope(Dispatchers.IO).launch {
                try {
                    db.getDao().insertItem(markers)
                    Log.d("Markers", "Marker inserted successfully")
                } catch (e: Exception) {
                    Log.e("Markers", "Error inserting markers", e)
                }
            }
        }
    }
}

@Composable
fun Greeting(name: String, modifier: Modifier = Modifier) {
    Text(
        text = "Hello $name!",
        modifier = modifier
    )
}

@Preview(showBackground = true)
@Composable
fun GreetingPreview() {
    NordMapTheme {
        Greeting("Android")
    }
}